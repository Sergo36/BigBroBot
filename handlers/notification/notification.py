import asyncio

from aiogram import Router, types, Bot, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

import config
from botStates import States
from callbacks.notification_callback_factory import NotificationCallbackFactory
from data.models.node import Node
from data.models.node_type import NodeType
from data.models.user import User
from handlers.notification.keyboards import get_keyboard_for_node_type, get_keyboard_main_notification, \
    get_keyboard_for_payment_notification

router = Router()


@router.message(Command(commands=['send']))
async def send_message(message: Message, state: FSMContext):
    await state.set_state(States.notification)
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=get_keyboard_main_notification()
    )


@router.callback_query(
    States.notification,
    NotificationCallbackFactory.filter(F.action == "send"))
async def order_type(
        callback: types.CallbackQuery,
):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–¥—ã\n"
    query = NodeType.select(NodeType.id, NodeType.name)
    keyboard = get_keyboard_for_node_type(query)
    await callback.message.edit_text(
        text=text,
        reply_markup=keyboard
    )

@router.callback_query(
    States.notification,
    NotificationCallbackFactory.filter(F.action == "node_install")
)
async def install_notification(callback: types.CallbackQuery):
    await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–¥—ã")


@router.message(
    States.notification,
    F.text.regexp('^[0-9]+$'))
async  def send_notification(message: Message, bot: Bot):
    node = Node.get_or_none(Node.id == message.text)

    if node is None:
        await message.answer(
            text="–ù–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"
                 "–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–æ–¥—ã"
        )
    else:
        await bot.send_message(
            chat_id=node.owner.telegram_id,
            parse_mode=ParseMode.MARKDOWN_V2,
            text=f"–î–æ—Ä–æ–≥–æ–π –Ω–æ–¥—Ä–∞–Ω–µ—Ä, –í–∞—à–∞ –Ω–æ–¥–∞ ***{node.type.name}*** —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\!\n"
                 f"–í—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –Ω–æ–¥–æ–π, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
                 f"***–ù–æ–¥—ã \> –ú–æ–∏ –Ω–æ–¥—ã \> {node.type.name} \> –†–∞—Å—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è***")


@router.callback_query(
    States.notification,
    NotificationCallbackFactory.filter(F.action == "select_type"))
async def notification_type(
        callback: types.CallbackQuery,
        callback_data: NotificationCallbackFactory
):
    query = (User
             .select(User.telegram_id, Node.id, Node.payment_date, NodeType.name, Node.cost)
             .join(Node, on=(User.id == Node.owner))
             .join(NodeType, on=(Node.type == NodeType.id))
             .where(Node.type == callback_data.node_type_id)
             .namedtuples())

    bot = Bot(config.TOKEN, parse_mode=ParseMode.HTML)
    await send_message(query, bot)
    await bot.session.close()
    await callback.answer()


async def send_message(query: any, bot: Bot):
    for row in query:
        try:
            await bot.send_message(
                chat_id=row.telegram_id,
                parse_mode=ParseMode.MARKDOWN_V2,
                text=f"‚ôªÔ∏è –î–æ—Ä–æ–≥–æ–π –Ω–æ–¥—Ä–∞–Ω–µ—Ä\! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –Ω–æ–¥—ã ***{row.name}***\.\n"
                     f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–µ–ª–Ω–∏—è: {str(row.cost).replace('.', ',')} USDT\n"
                     f"–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è {row.payment_date.day}\-–≥–æ —á–∏—Å–ª–∞\! \n\n"
                     f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–æ–¥—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´***Payment***¬ª –Ω–∏–∂–µ üëá",
                reply_markup=get_keyboard_for_payment_notification(row.id))
            await asyncio.sleep(5)
        except Exception as err:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {row.telegram_id}")
